"""
面向对象
定义简单的类
class 类名:
    def 方法名（self，参数列表）:
创建对象
对象变量名 = 类名
还可以创建多个猫对象
给对象增加属性
对象变量名.属性名=属性内容
"""
class cat():
    def eat(self):
        print("%s 吃"%self.name)
        #哪一个对象调用的方法，self就是哪一个对象的引用
    def di(self):
        print("heshui")


tom=cat()
tom.name="jjjj"
tom.eat()


"""
私有属性，方法
属性，方法前加__
对象内部可以访问

外部访问私有属性方法
_类名__名称


"""
class women:
    def __init__(self,name):
        self.name="mi"
        self.__age=18

    def se(self):
        print("%s年龄是%d"% (self.name,self.__age))
xf=women("xiaofang")
print(xf._women__age)

xf.se()


"""
单继承
子类有父类的所有方法和属性
继承拥有传递性
继承语法
class 类名（父类名）：

方法重写
只需要在子类中定义一个和父类中同名的方法并实现就行
如果子类中重写了父类方法
在使用子类对象调用方法时，会调用子类中重写的方法

多继承
语法格式
class 子类名（父类名1，父类名2）

"""
class an:
    def e(self):
        print("吃---")
    def d(self):
        print("喝")
    def p(self):
        print("跑--")
    def s(self):
        print("睡")
    def b(self):
        print("wang叫")

class a():
    def l(self):
        print("oooo")

class do(an,a):
    def b(self):
        print("叫")
    #使用super().调用原本在父类中封装的方法
        #super().b()

        #父类名.方法（self）
        an.b(self)
        print("8888")

wan=do()
wan.b()
wan.l()







